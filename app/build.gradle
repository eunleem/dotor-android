buildscript {
    repositories {
        jcenter()
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.21.4'
        classpath 'com.android.tools.build:gradle:2.0.0-beta6'
        classpath 'com.google.gms:google-services:1.3.0-beta1'
    }
}

apply plugin: 'com.android.application'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'io.fabric'

repositories {
    jcenter()
    maven { url 'https://maven.fabric.io/public' }
}

android {
    dexOptions {
        javaMaxHeapSize "4g"
    }

    compileSdkVersion 23
    buildToolsVersion '23.0.2'

    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }

    signingConfigs {
        beta {
            // this keystore is located at module level
            storeFile file("cert/keystore.jks")
            storePassword "vkfvkf"
            keyAlias "Palpal"
            keyPassword "vkfvkf"
        }
        release {
            storeFile file(RELEASE_STORE_FILE)
            storePassword RELEASE_STORE_PASSWORD
            keyAlias RELEASE_KEY_ALIAS
            keyPassword RELEASE_KEY_PASSWORD
        }
    }

    defaultConfig {
        applicationId "net.team88.dotor"
        minSdkVersion 19
        targetSdkVersion 23
        multiDexEnabled true
        versionCode 1
        versionName "1.0"

    }

    productFlavors {
        admin {
            applicationIdSuffix ".admin"
            versionCode 1
            versionName "1.0-admin"
        }
        user {
            versionCode 12
            versionName "1.0"
        }
    }

    buildTypes {
        debug {
            debuggable true
            applicationIdSuffix ".debug"
            versionNameSuffix "." + getDate() + "-debug"
            ext.disableCrashlytics = true
        }

        alphahr {
            applicationIdSuffix ".alpha"
            versionNameSuffix "." + getDate() + "-hr"
            signingConfig signingConfigs.beta
            //ext.betaDistributionReleaseNotesFilePath = "alpha_release_notes.txt"
            ext.betaDistributionEmails = "ra9522@daum.net"
            ext.betaDistributionNotifications = true
        }

        alphakn {
            applicationIdSuffix ".alpha"
            versionNameSuffix "." + getDate() + "-kn"
            signingConfig signingConfigs.beta
            //ext.betaDistributionReleaseNotesFilePath = "alpha_release_notes.txt"
            ext.betaDistributionEmails = "kn.kim@outlook.com"
            ext.betaDistributionNotifications = true
        }

        alpha {
            applicationIdSuffix ".alpha"
            versionNameSuffix "." + getDate() + "-alpha"
            signingConfig signingConfigs.beta
            //ext.betaDistributionReleaseNotesFilePath = "alpha_release_notes.txt"
            //ext.betaDistributionEmails = "jeindus@gmail.com, kn.kim@outlook.com"
            ext.betaDistributionNotifications = false
        }

        beta {
            applicationIdSuffix ".beta"
            versionNameSuffix "." + getDate() + "-beta"
            signingConfig signingConfigs.release
            //ext.betaDistributionReleaseNotesFilePath = "beta_release_notes.txt"
            //ext.betaDistributionEmails = "jeindus@gmail.com, kn.kim@outlook.com"
            //ext.betaDistributionNotifications = false
        }
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            versionNameSuffix "." + getDate() + "-beta"
        }
    }

}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    testCompile 'junit:junit:4.12'

    compile('com.crashlytics.sdk.android:crashlytics:2.5.5@aar') {
        transitive = true;
    }

    compile 'com.android.support:multidex:1.0.1'
    compile 'com.android.support:appcompat-v7:23.2.1'
    compile 'com.android.support:design:23.2.1'
    compile 'com.android.support:cardview-v7:23.2.1'
    compile 'com.android.support:recyclerview-v7:23.2.1'
    compile 'com.android.support:percent:23.2.1'

    compile 'com.google.android.gms:play-services:8.4.0'
    compile 'com.google.android.gms:play-services-gcm:8.4.0'

    compile 'com.google.code.gson:gson:2.6.1'

    compile 'org.mongodb:bson:3.2.2'

    compile 'com.squareup.retrofit2:retrofit:2.0.1'
    compile 'com.squareup.retrofit2:converter-gson:2.0.1'
    compile 'com.squareup.okhttp3:okhttp:3.2.0'

    compile 'com.github.bumptech.glide:glide:3.7.0'
    compile 'com.commit451:PhotoView:1.2.4'
    compile 'me.littlecheesecake:croplayout:1.0.5'

    compile 'io.reactivex:rxjava:1.1.2'
    compile 'io.reactivex:rxandroid:1.1.0'
    compile 'com.squareup.retrofit2:adapter-rxjava:2.0.1'
}


def getDatetime() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMddHHmm')
    return formattedDate
}

def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMdd')
    return formattedDate
}

def getTime() {
    def date = new Date()
    def formattedDate = date.format('HHmm')
    return formattedDate
}

def getDatetimeInteger() {
    def date = new Date()
    def formattedDate = date.format('MMddHHmm')
    return Integer.parseInt(formattedDate)
}

def getDateInteger() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMdd')
    return Integer.parseInt(formattedDate)
}

def getTimeInteger() {
    def date = new Date()
    def formattedDate = date.format('HHmm')
    return Integer.parseInt(formattedDate)
}
